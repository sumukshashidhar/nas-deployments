version: '3.4'

services:
  # portainer for container management
  # MANAGEMENT RELATED SERVICES
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8000:8000"
      - "9443:9443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${DOCKER_LOC}/portainer/data:/data"
  
  # airflow for task scheduling
  
  # postgresql for airflow usage
  postgresql:
    image: bitnami/postgresql:latest
    container_name: postgresql
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - "${DOCKER_LOC}/postgresql:/bitnami/postgresql"
    environment:
      - POSTGRESQL_USERNAME=bn_airflow
      - POSTGRESQL_PASSWORD=${PASSWORD_POSTGRESQL}
      - POSTGRESQL_DATABASE=airflow
  
  # redis for airflow usage
  redis:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - "${DOCKER_LOC}/redis:/bitnami"

  # airflow and workers
  airflow-worker:
      image: bitnami/airflow-worker:latest
      environment:
        - AIRFLOW_EXECUTOR=CeleryExecutor
        - AIRFLOW_DATABASE_NAME=airflow
        - AIRFLOW_DATABASE_USERNAME=bn_airflow
        - AIRFLOW_DATABASE_PASSWORD=${PASSWORD_POSTGRESQL}
        - AIRFLOW_LOAD_EXAMPLES=no
  airflow-scheduler:
    image: bitnami/airflow-scheduler:latest
    environment:
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_DATABASE_NAME=airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=${PASSWORD_POSTGRESQL}
      - AIRFLOW_LOAD_EXAMPLES=no
  airflow:
    image: bitnami/airflow:latest
    environment:
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_DATABASE_NAME=airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=${PASSWORD_POSTGRESQL}
      - AIRFLOW_PASSWORD=${PASSWORD_AIRFLOW}
      - AIRFLOW_USERNAME=user
    ports:
      - '8080:8080'

  
  # STREAMING RELATED SERVICES
  # public facing jellyfin deployment
  public_jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: public_jellyfin
    restart: unless-stopped
    ports:
      - "${PORT_JELLYFIN_PUBLIC}:8096"
    volumes:
      - "${CONTENT_MOVIES}:/movies"
      - "${CONTENT_TVSHOWS}:/tv"
      - "${DOCKER_LOC}/public_jellyfin/cache:/cache"
      - "${DOCKER_LOC}/public_jellyfin/config:/config"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # local jellyfin deployment
  local_jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: local_jellyfin
    restart: unless-stopped
    ports:
      - "${PORT_JELLYFIN_LOCAL}:8096"
    volumes:
      - "${CONTENT_CUSTOM}:/content"
      - "${DOCKER_LOC}/local_jellyfin/cache:/cache"
      - "${DOCKER_LOC}/local_jellyfin/config:/config"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # ARCHIVAL RELATED SERVICES
  # yt downloader
  ytdl:
    image: tzahi12345/youtubedl-material:latest
    container_name: ytdl
    environment:
      ytdl_mongodb_connection_string : 'mongodb://ytdl_mongo:27017'
      ytdl_use_local_db : 'false'
      write_ytdl_config: 'true'
    restart: unless-stopped
    depends_on:
      - ytdl_mongo
    ports:
      - "${PORT_YTDL}:17442"
    volumes:
      - "${DOCKER_LOC}/ytdl/appdata:/app/appdata"
      - "${DOCKER_LOC}/ytdl/subscriptions:/app/subscriptions"
      - "${DOCKER_LOC}/ytdl/users:/app/users"
      - "${DOCKER_LOC}/ytdl/audio:/app/audio"
      - "${DOCKER_LOC}/ytdl/video:/app/video"

  # mongodb for yt downloader - not exposed
  ytdl_mongo:
    image: mongo:4
    container_name: ytdl_mongo
    restart: unless-stopped
    volumes:
      - "${DOCKER_LOC}/ytdl_mongo:/data/db"
  
  # webpage archiver
  archivebox:
      image: archivebox/archivebox:master
      container_name: archivebox
      command: server --quick-init 0.0.0.0:8000
      ports:
          - 10000:8000
      environment:
          - ALLOWED_HOSTS=*                   # add any config options you want as env vars
          - MEDIA_MAX_SIZE=750m
      volumes:
          - "${DOCKER_LOC}/archivebox/data:/data"

  # file archiver and dump
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    ports:
      - "${PORT_NEXTCLOUD}:80"
    volumes:
      - "${DOCKER_LOC}/nextcloud/html:/var/www/html"
      - "${DOCKER_LOC}/nextcloud/config:/var/www/html/config"
      - "${DOCKER_LOC}/nextcloud/data:/var/www/html/data"
    environment:
      - MYSQL_HOST=nextcloud_db
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=${PASSWORD_NEXTCLOUD_DB}
    depends_on:
      - nextcloud_db
    links:
      - nextcloud_db
  
  # database for nextcloud
  nextcloud_db:
    image: mariadb:10.6
    container_name: nextcloud_db
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --log-bin=binlog
    volumes:
      - "${DOCKER_LOC}/nextcloud_db:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD=${PASSWORD_NEXTCLOUD_DB}
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud
      - MYSQL_PASSWORD=${PASSWORD_NEXTCLOUD_DB}

  # git server - local
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    restart: unless-stopped
    ports:
      - "${PORT_GITEA}:3000"
    volumes:
      - "${DOCKER_LOC}/gitea:/data"
    environment:
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=db:3306
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=${PASSWORD_GITEA_DB}
    depends_on:
      - gitea_db
  
  # database for git server
  gitea_db:
    image: mysql:8
    container_name: gitea_db
    restart: unless-stopped
    volumes:
      - "${DOCKER_LOC}/gitea_db:/var/lib/mysql"
    environment:
      - MYSQL_ROOT_PASSWORD=${PASSWORD_GITEA_DB}
      - MYSQL_DATABASE=gitea
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=${PASSWORD_GITEA_DB}
    ports:
      - 3306:3306

  # DEVELOPMENT RELATED SERVICES
  # jupyter notebook environment
  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    environment:
      - PASSWORD=${PASSWORD_JUPYTER}
    ports:
      - 8888:8888
    volumes:
      - "${DOCKER_LOC}/jupyter:/home/jovyan/work"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  
  # code server environment
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/GMT+6
      - PASSWORD=${PASSWORD_CODE_SERVER}
    volumes:
      - "${DOCKER_LOC}/vscode/config:/config"
    ports:
      - 8443:8443
    restart: unless-stopped
  
  