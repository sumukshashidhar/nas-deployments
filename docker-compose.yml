version: '3.4'

# used ports: 8000, 8080, 8443, 8888, 8096, 8097, 9000, 9001, 9443, 10000, 17442,
# portainer: 9000, 8000, 9443
# public_jellyfin: 8096
# local_jellyfin: 8097
# ytdl: 17442
# archivebox: 10000
# code-server: 8443
# jupyter: 8888
# airflow: 9001
# cells: 8080
# 


services:

  # to view portainer ports
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "8000:8000"
      - "9443:9443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${CACHE_DIRECTORY}/portainer:/data"

  # media services and the such
  # public and local jellyfin instances
  public_jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: public_jellyfin
    restart: unless-stopped
    ports:
      - "${JELLYFIN_ACCESS_PORT_PUBLIC}:8096"
    volumes:
      - "${MOVIES_DIRECTORY}:/movies"
      - "${TV_DIRECTORY}:/tv"
      - "${CACHE_DIRECTORY}/jellyfin:/cache"
      - "${CONFIG_DIRECTORY}/jellyfin:/config"

  local_jellyfin:
      image: jellyfin/jellyfin:latest
      container_name: public_jellyfin
      restart: unless-stopped
      ports:
        - "${JELLYFIN_ACCESS_PORT_LOCAL}:8096"
      volumes:
        - "${CUSTOM_DIRECTORY}:/movies"
        - "${CACHE_DIRECTORY}/local_jellyfin:/cache"
        - "${CONFIG_DIRECTORY}/local_jellyfin:/config"


  ytdl:
    image: tzahi12345/youtubedl-material:latest
    container_name: ytdl
    environment:
      ytdl_mongodb_connection_string : 'mongodb://ytdl_mongo:27017'
      ytdl_use_local_db : 'false'
      write_ytdl_config: 'true'
    restart: unless-stopped
    depends_on:
      - ytdl_mongo
    ports:
      - "17442:17442"
    volumes:
      - "${CACHE_DIRECTORY}/ytdl/appdata:/app/appdata"
      - "${CACHE_DIRECTORY}/ytdl/audio:/app/audio"
      - "${CACHE_DIRECTORY}/ytdl/video:/app/video"
      - "${CACHE_DIRECTORY}/ytdl/subscriptions:/app/subscriptions"
      - "${CACHE_DIRECTORY}/ytdl/users:/app/users"
  
  archivebox:
      # build: .                              # for developers working on archivebox
      image: archivebox/archivebox:master
      command: server --quick-init 0.0.0.0:8000
      ports:
          - 10000:8000
      environment:
          - ALLOWED_HOSTS=*                   # add any config options you want as env vars
          - MEDIA_MAX_SIZE=750m
      volumes:
          - ${CACHE_DIRECTORY}/archivebox/data:/data

  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - PASSWORD=password #optional
      - HASHED_PASSWORD= #optional
      - SUDO_PASSWORD=password #optional
      - SUDO_PASSWORD_HASH= #optional
      - DEFAULT_WORKSPACE=/config/workspace #optional
    volumes:
      - ${CACHE_DIRECTORY}/vscode/config:/config
    ports:
      - 8443:8443
    restart: unless-stopped

  jupyter:
    image: jupyter/datascience-notebook:latest
    container_name: jupyter
    ports:
      - 8888:8888
    volumes:
      - ${CACHE_DIRECTORY}/jupyter:/home/jovyan/work

  airflow-scheduler:
    image: docker.io/bitnami/airflow-scheduler:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_WEBSERVER_HOST=airflow
  airflow-worker:
    image: docker.io/bitnami/airflow-worker:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
      - AIRFLOW_WEBSERVER_HOST=airflow
  airflow:
    image: docker.io/bitnami/airflow:2
    environment:
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=bitnami1
      - AIRFLOW_EXECUTOR=CeleryExecutor
    ports:
      - '9001:8080'

  cells:
      image: pydio/cells:latest
      restart: unless-stopped
      ports: ["8080:8080"]
      volumes:
        - "${CACHE_DIRECTORY}/cells:/var/cells"
        - "${CACHE_DIRECTORY}/cells_data:/var/cells/data"

  mysql:
    image: mysql:8
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: P@ssw0rd
      MYSQL_DATABASE: cells
      MYSQL_USER: pydio
      MYSQL_PASSWORD: P@ssw0rd
    command: [mysqld, --character-set-server=utf8mb4, --collation-server=utf8mb4_unicode_ci]
    volumes:
      - "${CACHE_DIRECTORY}/mysql_cells:/var/lib/mysql"


  # accessories
  ytdl_mongo:
    image: mongo:4
    container_name: ytdl_mongo
    restart: unless-stopped
    volumes:
      - "${CACHE_DIRECTORY}/ytdl_mongo:/data/db"
  
  postgresql:
    image: docker.io/bitnami/postgresql:15
    volumes:
      - '${CACHE_DIRECTORY}/postgresql_data:/bitnami/postgresql'
    environment:
      - POSTGRESQL_DATABASE=bitnami_airflow
      - POSTGRESQL_USERNAME=bn_airflow
      - POSTGRESQL_PASSWORD=bitnami1
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
  redis:
    image: docker.io/bitnami/redis:7.0
    volumes:
      - '${CACHE_DIRECTORY}/redis_data:/bitnami'
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes